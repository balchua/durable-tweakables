syntax = "proto3";
package msg_source;
option go_package = "./msg_source";

message Source {

  message Configure {
    message Request {
      // Config contains the raw plugin settings.
      map<string, string> config = 1;
    }
    message Response {
      // Status contains the status of the configuration.
      string status = 1;
    }
  }

  message Run {
    message Request {
    }
    
    message Response {
        bytes value = 1;
    }
  }

  message Start {
    message Request {}
    message Response {
      string status = 1;
    }
  }
  message Stop {
    message Request {}
    message Response {
      string status = 1;
    }
  }

  message Teardown {
    message Request {}
    message Response {
      string status = 1;
    }
  }

    
}

message Empty {}

// SourcePlugin is responsible for fetching records from 3rd party resources 
// sending them to Tweakables
service SourcePlugin {

  // Configure is the first function to be called in a plugin. It provides the
  // plugin with the configuration that needs to be validated and stored. In
  // case the configuration is not valid it should return an error status.
  rpc Configure(Source.Configure.Request) returns (Source.Configure.Response);

  // Start is called after Configure to signal the plugin it can prepare to
  // start producing records. If needed, the plugin should open connections in
  // this function. The position parameter will contain the position of the
  // last record that was successfully processed. The Source should therefore
  // start producing records after this position.

  rpc Start(Source.Start.Request) returns (Source.Start.Response);
  // Run will open a bidirectional stream between Conduit and the plugin.
  // The plugin is responsible for fetching records from 3rd party resources
  // and sending them as responses to Conduit. Conduit will process the
  // records asynchronously and send acknowledgments back to the plugin to
  // signal that a record at a certain position was processed. Acknowledgments
  // will be sent back to the connector in the same order as the records
  // produced by the connector. If a record could not be processed by Conduit,
  // the stream will be closed without an acknowledgment being sent back to the
  // connector.

  // Run will open a bidirectional stream between Tweakables and the plugin.
  // The plugin is responsible for fetching records from 3rd party resources
  // and sending them as responses to Tweakables.
  rpc Run(Source.Run.Request) returns (stream Source.Run.Response);

  // Stop signals to the plugin to stop retrieving new records and flush any
  // records that might be cached into the stream. It should block until it can
  // determine the last record that will be sent to the stream and return the
  // position of the last record. 
  rpc Stop(Source.Stop.Request) returns (Source.Stop.Response);
  // Teardown signals to the plugin that there will be no more calls to any
  // other function. After Teardown returns, the plugin should be ready for a
  // graceful shutdown.
  rpc Teardown(Source.Teardown.Request) returns (Source.Teardown.Response);

}