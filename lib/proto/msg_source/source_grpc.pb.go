// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: lib/proto/msg_source/source.proto

package msg_source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourcePluginClient is the client API for SourcePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcePluginClient interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(ctx context.Context, in *Source_Configure_Request, opts ...grpc.CallOption) (*Source_Configure_Response, error)
	Start(ctx context.Context, in *Source_Start_Request, opts ...grpc.CallOption) (*Source_Start_Response, error)
	// Run will open a bidirectional stream between Tweakables and the plugin.
	// The plugin is responsible for fetching records from 3rd party resources
	// and sending them as responses to Tweakables.
	Run(ctx context.Context, in *Source_Run_Request, opts ...grpc.CallOption) (SourcePlugin_RunClient, error)
	// Stop signals to the plugin to stop retrieving new records and flush any
	// records that might be cached into the stream. It should block until it can
	// determine the last record that will be sent to the stream and return the
	// position of the last record.
	Stop(ctx context.Context, in *Source_Stop_Request, opts ...grpc.CallOption) (*Source_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(ctx context.Context, in *Source_Teardown_Request, opts ...grpc.CallOption) (*Source_Teardown_Response, error)
}

type sourcePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcePluginClient(cc grpc.ClientConnInterface) SourcePluginClient {
	return &sourcePluginClient{cc}
}

func (c *sourcePluginClient) Configure(ctx context.Context, in *Source_Configure_Request, opts ...grpc.CallOption) (*Source_Configure_Response, error) {
	out := new(Source_Configure_Response)
	err := c.cc.Invoke(ctx, "/msg_source.SourcePlugin/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Start(ctx context.Context, in *Source_Start_Request, opts ...grpc.CallOption) (*Source_Start_Response, error) {
	out := new(Source_Start_Response)
	err := c.cc.Invoke(ctx, "/msg_source.SourcePlugin/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Run(ctx context.Context, in *Source_Run_Request, opts ...grpc.CallOption) (SourcePlugin_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &SourcePlugin_ServiceDesc.Streams[0], "/msg_source.SourcePlugin/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &sourcePluginRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SourcePlugin_RunClient interface {
	Recv() (*Source_Run_Response, error)
	grpc.ClientStream
}

type sourcePluginRunClient struct {
	grpc.ClientStream
}

func (x *sourcePluginRunClient) Recv() (*Source_Run_Response, error) {
	m := new(Source_Run_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sourcePluginClient) Stop(ctx context.Context, in *Source_Stop_Request, opts ...grpc.CallOption) (*Source_Stop_Response, error) {
	out := new(Source_Stop_Response)
	err := c.cc.Invoke(ctx, "/msg_source.SourcePlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcePluginClient) Teardown(ctx context.Context, in *Source_Teardown_Request, opts ...grpc.CallOption) (*Source_Teardown_Response, error) {
	out := new(Source_Teardown_Response)
	err := c.cc.Invoke(ctx, "/msg_source.SourcePlugin/Teardown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcePluginServer is the server API for SourcePlugin service.
// All implementations must embed UnimplementedSourcePluginServer
// for forward compatibility
type SourcePluginServer interface {
	// Configure is the first function to be called in a plugin. It provides the
	// plugin with the configuration that needs to be validated and stored. In
	// case the configuration is not valid it should return an error status.
	Configure(context.Context, *Source_Configure_Request) (*Source_Configure_Response, error)
	Start(context.Context, *Source_Start_Request) (*Source_Start_Response, error)
	// Run will open a bidirectional stream between Tweakables and the plugin.
	// The plugin is responsible for fetching records from 3rd party resources
	// and sending them as responses to Tweakables.
	Run(*Source_Run_Request, SourcePlugin_RunServer) error
	// Stop signals to the plugin to stop retrieving new records and flush any
	// records that might be cached into the stream. It should block until it can
	// determine the last record that will be sent to the stream and return the
	// position of the last record.
	Stop(context.Context, *Source_Stop_Request) (*Source_Stop_Response, error)
	// Teardown signals to the plugin that there will be no more calls to any
	// other function. After Teardown returns, the plugin should be ready for a
	// graceful shutdown.
	Teardown(context.Context, *Source_Teardown_Request) (*Source_Teardown_Response, error)
	mustEmbedUnimplementedSourcePluginServer()
}

// UnimplementedSourcePluginServer must be embedded to have forward compatible implementations.
type UnimplementedSourcePluginServer struct {
}

func (UnimplementedSourcePluginServer) Configure(context.Context, *Source_Configure_Request) (*Source_Configure_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedSourcePluginServer) Start(context.Context, *Source_Start_Request) (*Source_Start_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedSourcePluginServer) Run(*Source_Run_Request, SourcePlugin_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedSourcePluginServer) Stop(context.Context, *Source_Stop_Request) (*Source_Stop_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSourcePluginServer) Teardown(context.Context, *Source_Teardown_Request) (*Source_Teardown_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedSourcePluginServer) mustEmbedUnimplementedSourcePluginServer() {}

// UnsafeSourcePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcePluginServer will
// result in compilation errors.
type UnsafeSourcePluginServer interface {
	mustEmbedUnimplementedSourcePluginServer()
}

func RegisterSourcePluginServer(s grpc.ServiceRegistrar, srv SourcePluginServer) {
	s.RegisterService(&SourcePlugin_ServiceDesc, srv)
}

func _SourcePlugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Configure_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg_source.SourcePlugin/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Configure(ctx, req.(*Source_Configure_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Start_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg_source.SourcePlugin/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Start(ctx, req.(*Source_Start_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Source_Run_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SourcePluginServer).Run(m, &sourcePluginRunServer{stream})
}

type SourcePlugin_RunServer interface {
	Send(*Source_Run_Response) error
	grpc.ServerStream
}

type sourcePluginRunServer struct {
	grpc.ServerStream
}

func (x *sourcePluginRunServer) Send(m *Source_Run_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _SourcePlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Stop_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg_source.SourcePlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Stop(ctx, req.(*Source_Stop_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourcePlugin_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source_Teardown_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcePluginServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg_source.SourcePlugin/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcePluginServer).Teardown(ctx, req.(*Source_Teardown_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SourcePlugin_ServiceDesc is the grpc.ServiceDesc for SourcePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourcePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg_source.SourcePlugin",
	HandlerType: (*SourcePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _SourcePlugin_Configure_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _SourcePlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SourcePlugin_Stop_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _SourcePlugin_Teardown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _SourcePlugin_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lib/proto/msg_source/source.proto",
}
