// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: proto/msg_source/source.proto

package msg_source

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSourceClient is the client API for MessageSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSourceClient interface {
	Receive(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type messageSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSourceClient(cc grpc.ClientConnInterface) MessageSourceClient {
	return &messageSourceClient{cc}
}

func (c *messageSourceClient) Receive(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/tweakable.io.MessageSource/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageSourceServer is the server API for MessageSource service.
// All implementations must embed UnimplementedMessageSourceServer
// for forward compatibility
type MessageSourceServer interface {
	Receive(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedMessageSourceServer()
}

// UnimplementedMessageSourceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageSourceServer struct {
}

func (UnimplementedMessageSourceServer) Receive(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMessageSourceServer) mustEmbedUnimplementedMessageSourceServer() {}

// UnsafeMessageSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSourceServer will
// result in compilation errors.
type UnsafeMessageSourceServer interface {
	mustEmbedUnimplementedMessageSourceServer()
}

func RegisterMessageSourceServer(s grpc.ServiceRegistrar, srv MessageSourceServer) {
	s.RegisterService(&MessageSource_ServiceDesc, srv)
}

func _MessageSource_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageSourceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweakable.io.MessageSource/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageSourceServer).Receive(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageSource_ServiceDesc is the grpc.ServiceDesc for MessageSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweakable.io.MessageSource",
	HandlerType: (*MessageSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _MessageSource_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/msg_source/source.proto",
}
